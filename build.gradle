// Copyright (c) ZeroC, Inc. All rights reserved.

plugins {
  id "com.gradle.plugin-publish" version "0.18.0"
}

apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    if(!localOnly.toBoolean()) {
        testImplementation 'junit:junit:4.12'
        testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    }
}

test {
    testLogging {
        events = ["failed", "skipped"]
        exceptionFormat = "full"
        showStandardStreams = false
    }
    onlyIf { ! localOnly.toBoolean() }
}

version  = "1.4.8"
group = "com.zeroc.gradle.ice-builder"

if(!localOnly.toBoolean()) {
    apply plugin: "com.gradle.plugin-publish"

    pluginBundle {
        website = 'https://github.com/zeroc-ice/ice-builder-gradle'
        vcsUrl = 'https://github.com/zeroc-ice/ice-builder-gradle.git'
        description = 'Plugin to automate the compilation of Slice files to Java'
        tags = ['zeroc', 'ice', 'slice']

        plugins {
            slicePlugin {
                id = 'com.zeroc.gradle.ice-builder.slice'
                displayName = 'Ice Builder for Gradle'
            }
        }
    }
} else {
    prefix = prefix ? prefix : (System.properties['os.name'].toLowerCase().contains('windows') ?
        "C:\\ice-builder-gradle-${project.version}" : "/opt/ice-builder-gradle-${project.version}")

    def jarDir = (prefix == "/usr" || prefix == "/usr/local") ? "${prefix}/share/java" : "${prefix}/lib"

    project.ext.pomName = "$buildDir/libs/${project.name}-${project.version}.pom"
    project.ext.pomLicense = project.hasProperty("licenseURL") ?
        licenseURL :
        "https://github.com/zeroc-ice/ice-builder-gradle/blob/master/LICENSE"

    if(GradleVersion.current() >= GradleVersion.version('7.3')) {
        apply from: "maven-publish.publishing.gradle"
    } else {
        apply from: "maven.publishing.gradle"
    }

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'groovydoc'
        from groovydoc
        destinationDir = new File("$buildDir/libs")
    }

    assemble.dependsOn(groovydocJar)

    task sourcesJar(type: Jar, dependsOn: jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        destinationDir = new File("$buildDir/libs")
    }
    assemble.dependsOn(sourcesJar)

    task installJars(type: Copy, dependsOn: assemble) {
        from "${project.ext.pomName}"
        from "$buildDir/libs/${jar.archiveName}"
        from "$buildDir/libs/${project.name}-${project.version}-sources.jar"
        from "$buildDir/libs/${project.name}-${project.version}-groovydoc.jar"
        into "${DESTDIR}${jarDir}"
    }
    install.dependsOn installJars
}
